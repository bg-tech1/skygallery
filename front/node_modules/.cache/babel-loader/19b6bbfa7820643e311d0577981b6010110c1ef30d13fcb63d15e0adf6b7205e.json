{"ast":null,"code":"var _jsxFileName = \"/Users/keigohibino/develop/Go/skyview/skyviewsharing/src/components/PhotoGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./PhotoGrid.css\";\nimport { FaHeart } from \"react-icons/fa\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhotoGrid = ({\n  photos,\n  username\n}) => {\n  _s();\n  const [likedPhotos, setLikedPhotos] = useState({});\n  const toggleLike = (photoId, url) => {\n    setLikedPhotos(prevLikedPhotos => {\n      const newState = {\n        ...prevLikedPhotos,\n        [photoId]: {\n          photoId,\n          url\n        }\n      };\n      return newState;\n    });\n    // setLikedPhotos((prevLikedPhotos) => ({\n    //     ...prevLikedPhotos,\n    //     [photoId]: prevLikedPhotos[photoId]\n    //         ? { ...prevLikedPhotos[photoId], liked: !prevLikedPhotos[photoId].liked }\n    //         : { url, liked: true }\n    // }));\n  };\n  // [備忘録]stateの変更を検知してからuseEffectするようにしたらうまく最新のstateを取得できた\n  useEffect(() => {\n    const saveInterval = setInterval(() => {\n      saveLikedPhotosStatus();\n    }, 50000);\n    return () => clearInterval(saveInterval);\n  }, [likedPhotos]);\n  const saveLikedPhotosStatus = async () => {\n    console.log(\"最新のstate\", likedPhotos);\n    const photosArray = Object.entries(likedPhotos).map(([photoId, data]) => ({\n      photoId,\n      url: data.url,\n      liked: true\n    }));\n    console.log(\"photosArray\", photosArray);\n    // const requestBody = JSON.stringify({\n    //     username,\n    //     likedPhotoStatus: photosArray\n    // })\n    try {\n      const response = await axios.post(\"http://localhost:8080/registerPhoto\", {\n        username,\n        likedPhotoStatus: photosArray\n      });\n    } catch (error) {\n      console.error(\"CannotRegisterLikedPhoto\", error);\n    }\n  };\n\n  // const saveLikedPhotosStatus = async () => {\n  //     const username = \"test\"\n  //     const photosArray = Object.entries(likedPhotos).map(([photoId, data]) => ({\n  //         photoId,\n  //         url: data.url,\n  //         liked: data.liked,\n  //     }));\n  //     // const requestBody = JSON.stringify({\n  //     //     username,\n  //     //     likedPhotoStatus: photosArray\n  //     // })\n  //     try {\n  //         const response = await axios.post(\"http://localhost:8080/registerPhoto\", {\n  //             username,\n  //             likedPhotoStatus: photosArray\n  //         })\n  //     } catch (error) {\n  //         console.error(\"CannotRegisterLikedPhoto\", error)\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"photo-grid\",\n    children: photos.map(photo => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photo-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: photo.urls.regular\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `like-icon ${likedPhotos[photo.id] ? \"liked\" : \"\"}`,\n        onClick: () => toggleLike(photo.id, photo.urls.regular),\n        children: /*#__PURE__*/_jsxDEV(FaHeart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, photo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(PhotoGrid, \"fMqq6UCZEIZ3tC4jVOKdDyzHPiM=\");\n_c = PhotoGrid;\nexport default PhotoGrid;\nvar _c;\n$RefreshReg$(_c, \"PhotoGrid\");","map":{"version":3,"names":["React","useEffect","useState","FaHeart","axios","jsxDEV","_jsxDEV","PhotoGrid","photos","username","_s","likedPhotos","setLikedPhotos","toggleLike","photoId","url","prevLikedPhotos","newState","saveInterval","setInterval","saveLikedPhotosStatus","clearInterval","console","log","photosArray","Object","entries","map","data","liked","response","post","likedPhotoStatus","error","className","children","photo","src","urls","regular","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["/Users/keigohibino/develop/Go/skyview/skyviewsharing/src/components/PhotoGrid.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./PhotoGrid.css\";\nimport { FaHeart } from \"react-icons/fa\";\nimport axios from \"axios\";\n\nconst PhotoGrid = ({ photos, username }) => {\n    const [likedPhotos, setLikedPhotos] = useState({});\n\n    const toggleLike = (photoId, url) => {\n        setLikedPhotos((prevLikedPhotos) => {\n            const newState = {\n                ...prevLikedPhotos,\n                [photoId]: { photoId, url }\n            };\n            return newState;\n        });\n        // setLikedPhotos((prevLikedPhotos) => ({\n        //     ...prevLikedPhotos,\n        //     [photoId]: prevLikedPhotos[photoId]\n        //         ? { ...prevLikedPhotos[photoId], liked: !prevLikedPhotos[photoId].liked }\n        //         : { url, liked: true }\n        // }));\n    };\n    // [備忘録]stateの変更を検知してからuseEffectするようにしたらうまく最新のstateを取得できた\n    useEffect(() => {\n        const saveInterval = setInterval(() => {\n            saveLikedPhotosStatus();\n        }, 50000);\n        return () => clearInterval(saveInterval);\n    }, [likedPhotos]);\n    const saveLikedPhotosStatus = async () => {\n        console.log(\"最新のstate\", likedPhotos)\n        const photosArray = Object.entries(likedPhotos).map(([photoId, data]) => ({\n            photoId,\n            url: data.url,\n            liked: true\n        }));\n        console.log(\"photosArray\", photosArray)\n        // const requestBody = JSON.stringify({\n        //     username,\n        //     likedPhotoStatus: photosArray\n        // })\n        try {\n            const response = await axios.post(\"http://localhost:8080/registerPhoto\", {\n                username,\n                likedPhotoStatus: photosArray\n            })\n        } catch (error) {\n            console.error(\"CannotRegisterLikedPhoto\", error)\n        }\n    }\n\n    // const saveLikedPhotosStatus = async () => {\n    //     const username = \"test\"\n    //     const photosArray = Object.entries(likedPhotos).map(([photoId, data]) => ({\n    //         photoId,\n    //         url: data.url,\n    //         liked: data.liked,\n    //     }));\n    //     // const requestBody = JSON.stringify({\n    //     //     username,\n    //     //     likedPhotoStatus: photosArray\n    //     // })\n    //     try {\n    //         const response = await axios.post(\"http://localhost:8080/registerPhoto\", {\n    //             username,\n    //             likedPhotoStatus: photosArray\n    //         })\n    //     } catch (error) {\n    //         console.error(\"CannotRegisterLikedPhoto\", error)\n    //     }\n    // }\n    return (\n        <div className=\"photo-grid\">\n            {photos.map((photo) => (\n                <div key={photo.id} className=\"photo-item\">\n                    <img src={photo.urls.regular} />\n                    {/* <img src={photo} /> */}\n                    <div\n                        className={`like-icon ${likedPhotos[photo.id] ? \"liked\" : \"\"}`}\n                        onClick={() => toggleLike(photo.id, photo.urls.regular)}\n                    >\n                        <FaHeart />\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default PhotoGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}