{"ast":null,"code":"var _jsxFileName = \"/app/src/components/PhotoGrid.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./PhotoGrid.css\";\nimport { FaHeart } from \"react-icons/fa\";\nimport { useGetUserInfo } from \"../hooks/useGetUserInfo\";\nimport apiClient from \"../api/apiClient\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhotoGrid = ({\n  photos\n}) => {\n  _s();\n  const [likedPhotos, setLikedPhotos] = useState({});\n  const username = useGetUserInfo();\n  const toggleLike = (photoId, url) => {\n    setLikedPhotos(prevLikedPhotos => {\n      var _prevLikedPhotos$phot;\n      const isLiked = ((_prevLikedPhotos$phot = prevLikedPhotos[photoId]) === null || _prevLikedPhotos$phot === void 0 ? void 0 : _prevLikedPhotos$phot.liked) || false;\n      const newState = {\n        ...prevLikedPhotos,\n        [photoId]: {\n          photoId,\n          url,\n          liked: !isLiked\n        }\n      };\n      return newState;\n    });\n  };\n  const deleteUnlikedPhotos = () => {\n    setLikedPhotos(prevLikedPhotos => {\n      const newState = {\n        ...prevLikedPhotos\n      };\n      Object.entries(newState).forEach(([photoId, data]) => {\n        if (!data.liked) {\n          delete newState[photoId];\n        }\n      });\n      return newState;\n    });\n  };\n\n  // [備忘録]stateの変更を検知してからuseEffectするようにしたらうまく最新のstateを取得できた\n  useEffect(() => {\n    if (username) {\n      const saveInterval = setInterval(() => {\n        saveLikedPhotosStatus();\n      }, 1000);\n      return () => clearInterval(saveInterval);\n    }\n  }, [likedPhotos]);\n  const saveLikedPhotosStatus = async () => {\n    const likedPhotosArray = Object.entries(likedPhotos).map(([photoId, data]) => ({\n      photoId,\n      url: data.url,\n      liked: data.liked\n    }));\n    try {\n      await apiClient.post(\"/registerPhoto\", likedPhotosArray);\n      deleteUnlikedPhotos();\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        console.error(\"セッションがタイムアウトしました\");\n        window.location.href = \"/session-timeout\"; // ✅ セッション切れページへ\n      } else {\n        console.error(\"CannotRegisterLikedPhoto\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"photo-grid\",\n    children: photos.map(photo => {\n      var _likedPhotos$photo$id;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"photo-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: photo.urls.regular\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `like-icon ${(_likedPhotos$photo$id = likedPhotos[photo.id]) !== null && _likedPhotos$photo$id !== void 0 && _likedPhotos$photo$id.liked ? \"liked\" : \"\"}`,\n          onClick: () => toggleLike(photo.id, photo.urls.regular),\n          children: /*#__PURE__*/_jsxDEV(FaHeart, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, photo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(PhotoGrid, \"O99ExpbEWK4a+0ZCQGWm9TUGmWI=\", false, function () {\n  return [useGetUserInfo];\n});\n_c = PhotoGrid;\nexport default PhotoGrid;\nvar _c;\n$RefreshReg$(_c, \"PhotoGrid\");","map":{"version":3,"names":["React","useEffect","useState","FaHeart","useGetUserInfo","apiClient","Navigate","jsxDEV","_jsxDEV","PhotoGrid","photos","_s","likedPhotos","setLikedPhotos","username","toggleLike","photoId","url","prevLikedPhotos","_prevLikedPhotos$phot","isLiked","liked","newState","deleteUnlikedPhotos","Object","entries","forEach","data","saveInterval","setInterval","saveLikedPhotosStatus","clearInterval","likedPhotosArray","map","post","error","_error$response","response","status","console","window","location","href","className","children","photo","_likedPhotos$photo$id","src","urls","regular","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","_c","$RefreshReg$"],"sources":["/app/src/components/PhotoGrid.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./PhotoGrid.css\";\nimport { FaHeart } from \"react-icons/fa\";\nimport { useGetUserInfo } from \"../hooks/useGetUserInfo\"\nimport apiClient from \"../api/apiClient\";\nimport { Navigate } from \"react-router-dom\";\n\nconst PhotoGrid = ({ photos }) => {\n    const [likedPhotos, setLikedPhotos] = useState({});\n\n    const username = useGetUserInfo();\n\n    const toggleLike = (photoId, url) => {\n        setLikedPhotos((prevLikedPhotos) => {\n            const isLiked = prevLikedPhotos[photoId]?.liked || false;\n            const newState = {\n                ...prevLikedPhotos,\n                [photoId]: { photoId, url, liked: !isLiked }\n            };\n            return newState;\n        });\n    };\n\n    const deleteUnlikedPhotos = () => {\n        setLikedPhotos((prevLikedPhotos) => {\n            const newState = { ...prevLikedPhotos };\n            Object.entries(newState).forEach(([photoId, data]) => {\n                if (!data.liked) {\n                    delete newState[photoId];\n                }\n            });\n            return newState;\n        })\n    };\n\n    // [備忘録]stateの変更を検知してからuseEffectするようにしたらうまく最新のstateを取得できた\n    useEffect(() => {\n        if (username) {\n            const saveInterval = setInterval(() => {\n                saveLikedPhotosStatus();\n            }, 1000);\n            return () => clearInterval(saveInterval);\n        }\n    }, [likedPhotos,]);\n    const saveLikedPhotosStatus = async () => {\n        const likedPhotosArray = Object.entries(likedPhotos).map(([photoId, data]) => ({\n            photoId,\n            url: data.url,\n            liked: data.liked\n        }));\n        try {\n            await apiClient.post(\"/registerPhoto\", likedPhotosArray)\n            deleteUnlikedPhotos();\n        } catch (error) {\n            if (error.response?.status === 401) {\n                console.error(\"セッションがタイムアウトしました\");\n                window.location.href = \"/session-timeout\"; // ✅ セッション切れページへ\n            } else {\n                console.error(\"CannotRegisterLikedPhoto\", error)\n            }\n        }\n    };\n    return (\n        <div className=\"photo-grid\">\n            {photos.map((photo) => (\n                <div key={photo.id} className=\"photo-item\">\n                    <img src={photo.urls.regular} />\n                    <div\n                        className={`like-icon ${likedPhotos[photo.id]?.liked ? \"liked\" : \"\"}`}\n                        onClick={() => toggleLike(photo.id, photo.urls.regular)}\n                    >\n                        <FaHeart />\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default PhotoGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}